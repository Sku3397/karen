"""
Monitoring Template
Generated by Archaeologist Agent
"""

import logging
import time
from datetime import datetime
from typing import Dict, Any, Optional

class MonitoringTemplate:
    """
    Template for system monitoring functionality
    """
    
    def __init__(self, component_name: str):
        self.component_name = component_name
        self.logger = logging.getLogger(f"monitor.{component_name}")
        self.metrics = {}
        self.start_time = datetime.now()
        
    def record_metric(self, metric_name: str, value: Any, timestamp: Optional[datetime] = None):
        """Record a metric value"""
        if timestamp is None:
            timestamp = datetime.now()
            
        if metric_name not in self.metrics:
            self.metrics[metric_name] = []
            
        self.metrics[metric_name].append({
            "value": value,
            "timestamp": timestamp,
            "component": self.component_name
        })
        
    def get_health_status(self) -> Dict[str, Any]:
        """Get component health status"""
        uptime = datetime.now() - self.start_time
        
        return {
            "component": self.component_name,
            "status": "healthy",
            "uptime_seconds": uptime.total_seconds(),
            "metrics_count": sum(len(values) for values in self.metrics.values()),
            "last_check": datetime.now().isoformat()
        }
        
    def alert_on_threshold(self, metric_name: str, threshold: float, comparison: str = "greater"):
        """Alert if metric exceeds threshold"""
        if metric_name not in self.metrics or not self.metrics[metric_name]:
            return False
            
        latest_value = self.metrics[metric_name][-1]["value"]
        
        if comparison == "greater" and latest_value > threshold:
            self.logger.warning(f"{metric_name} exceeded threshold: {latest_value} > {threshold}")
            return True
        elif comparison == "less" and latest_value < threshold:
            self.logger.warning(f"{metric_name} below threshold: {latest_value} < {threshold}")
            return True
            
        return False

# Example usage:
# monitor = MonitoringTemplate("email_client")
# monitor.record_metric("emails_processed", 25)
# status = monitor.get_health_status()
