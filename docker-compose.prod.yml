version: '3.8'

services:
  # Redis - Message broker and cache
  redis:
    image: redis:7-alpine
    container_name: karen-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 1gb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    networks:
      - karen-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # FastAPI Application Server
  karen-api:
    build:
      context: .
      target: api
    container_name: karen-api-prod
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=production
      - DEBUG=false
      - WORKERS=4
    env_file:
      - .env.production
    volumes:
      - karen_logs:/app/logs
      - karen_data:/app/autonomous-agents
      - oauth_tokens:/app/tokens:ro
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - karen-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
      replicas: 2

  # Celery Worker for background tasks
  karen-worker:
    build:
      context: .
      target: worker
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=production
      - DEBUG=false
    env_file:
      - .env.production
    volumes:
      - karen_logs:/app/logs
      - karen_data:/app/autonomous-agents
      - oauth_tokens:/app/tokens:ro
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - karen-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
      replicas: 3

  # Celery Beat Scheduler
  karen-beat:
    build:
      context: .
      target: beat
    container_name: karen-beat-prod
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=production
      - DEBUG=false
    env_file:
      - .env.production
    volumes:
      - karen_logs:/app/logs
      - karen_data:/app/autonomous-agents
      - oauth_tokens:/app/tokens:ro
      - celery_beat:/app/celerybeat-schedule
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - karen-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Production Frontend
  karen-frontend:
    build:
      context: .
      dockerfile: frontend.prod.Dockerfile
    container_name: karen-frontend-prod
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.yourdomain.com
    volumes:
      - frontend_build:/app/build
    networks:
      - karen-network
    restart: always

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: karen-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - frontend_build:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - karen-api
      - karen-frontend
    networks:
      - karen-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: karen-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - karen-network
    restart: always

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: karen-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - karen-network
    restart: always

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: karen-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - karen-network
    restart: always

  # Promtail log collector
  promtail:
    image: grafana/promtail:latest
    container_name: karen-promtail
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - karen_logs:/var/log/karen:ro
      - nginx_logs:/var/log/nginx:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - karen-network
    restart: always

  # Backup service
  backup:
    build:
      context: .
      dockerfile: backup.Dockerfile
    container_name: karen-backup
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    env_file:
      - .env.production
    volumes:
      - karen_data:/app/data:ro
      - oauth_tokens:/app/tokens:ro
      - backup_storage:/app/backups
    depends_on:
      - redis
    networks:
      - karen-network
    restart: always

volumes:
  redis_data:
    driver: local
  karen_logs:
    driver: local
  karen_data:
    driver: local
  oauth_tokens:
    driver: local
  celery_beat:
    driver: local
  frontend_build:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  backup_storage:
    driver: local

networks:
  karen-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16